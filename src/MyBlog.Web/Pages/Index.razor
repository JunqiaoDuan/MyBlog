@using MyBlog.Service.Shared.Dtos.ExternalDto.Dida365
@using MyBlog.Service.Shared.Dtos.Queries
@using MyBlog.Service.Shared.Dtos.VisualDto
@using MyBlog.Service.Shared.Interfaces.ExternalInterface
@using MyBlog.Service.Shared.Interfaces.Profiles
@using MyBlog.Service.Shared.Interfaces.Statistics
@using System.Text.Json
@using MyBlog.Web.Components.Charts

@page "/"

@inject IProfileService _profileService
@inject IStatisticService _statisticService
@inject IYearlyHeatMapService _yearlyHeatMapService;

<PageTitle>About</PageTitle>

@if (name == null)
{
    <p>Loading profile...</p>
}
else
{
    <div class="profile-container">
        @if (!string.IsNullOrEmpty(avatar))
        {
            <img class="profile-avatar" src="@avatar" alt="Avatar" />
        }
        <h1 class="profile-name">@name</h1>
        @if (!string.IsNullOrEmpty(location))
        {
            <p class="profile-location">🌍 @location</p>
        }
        @if (!string.IsNullOrEmpty(bio))
        {
            <div class="profile-bio" @key="bio" >
                @((MarkupString)bio)
            </div>
        }
        @if (!string.IsNullOrEmpty(skills))
        {
            <div class="profile-skills">
                <div>
                    <strong>🛠️ Skills</strong>
                </div>
                <div class="profile-skills-list">
                    @for (int i = 0; i < skillItems.Count; i++)
                    {
                        var items = skillItems[i];
                        <div class="profile-skills-group">
                            @for (int j = 0; j < items.Count; j++)
                            {
                                var item = items[j];
                                var imgSrc = $"/icons/{item}.svg";
                                <div class="profile-skill-item">
                                    <img src="@imgSrc" alt="@item" title="@item" />
                                    <span>@item</span>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }

        @* chart *@
        <YearlyHeatMap DataList="yearlyWorks"></YearlyHeatMap>

        @* contact *@
        <div class="profile-contacts">
            @if (!string.IsNullOrEmpty(github))
            {
                <a class="profile-contact-link" href="@github" target="_blank" title="GitHub">
                    <span class="profile-contact-content" aria-label="GitHub">
                        <img class="profile-contact-img" src="/icons/github.svg" alt="GitHub" style="animation-delay:0ms" />
                    </span>
                </a>
            }
            @if (!string.IsNullOrEmpty(discord))
            {
                <a class="profile-contact-link" href="@discord" target="_blank" title="Discord">
                    <span class="profile-contact-content" aria-label="Discord">
                        <img class="profile-contact-img" src="/icons/discord.svg" alt="Discord" style="animation-delay:200ms" />
                    </span>
                </a>
            }
            @if (!string.IsNullOrEmpty(email))
            {
                <a class="profile-contact-link" href="mailto:@email" title="Email">
                    <span class="profile-contact-content" aria-label="Email">
                        <img class="profile-contact-img" src="/icons/email.svg" alt="Email" style="animation-delay:400ms" />
                    </span>
                </a>
            }
        </div>
    </div>
}

@code {
    string? avatar;
    string? name;
    string? location;
    string? github;
    string? discord;
    string? email;
    string? bio;
    string? skills;
    List<List<string>> skillItems = new List<List<string>>();

    List<DateIntValue> yearlyWorks = new List<DateIntValue>();

    protected override async Task OnInitializedAsync()
    {
        #region profile

        var profileViews = await _profileService.GetProfilesAsync();

        avatar = profileViews.FirstOrDefault(p => p.Name == "Avatar")?.Value;
        name = profileViews.FirstOrDefault(p => p.Name == "Name")?.Value;
        location = profileViews.FirstOrDefault(p => p.Name == "Location")?.Value;
        github = profileViews.FirstOrDefault(p => p.Name == "GitHub")?.Value;
        discord = profileViews.FirstOrDefault(p => p.Name == "Discord")?.Value;
        email = profileViews.FirstOrDefault(p => p.Name == "Email")?.Value;
        bio = profileViews.FirstOrDefault(p => p.Name == "Bio")?.Value;
        skills = profileViews.FirstOrDefault(p => p.Name == "Skills")?.Value;

        if (!string.IsNullOrWhiteSpace(skills))
        {
            skillItems = skills
                .Split(';', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
                .Select(g => g.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList())
                .ToList();
        }

        #endregion

        yearlyWorks = await _yearlyHeatMapService.ReadFromDbAsync();

    }

}
